apiVersion: v1
data:
  ACCOUNTS_DB_URI: postgresql://admin:admin@127.0.0.1:5432/accounts-db
  POSTGRES_DB: accounts-db
  POSTGRES_PASSWORD: accounts-pwd
  POSTGRES_USER: accounts-admin
kind: ConfigMap
metadata:
  labels:
    app: accounts-db
  name: accounts-db-config
---
apiVersion: v1
data:
  0-accounts-schema.sql: |
    /*
     * Copyright 2020, Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    CREATE TABLE IF NOT EXISTS users (
      accountid CHAR(10) PRIMARY KEY,
      username VARCHAR(64) UNIQUE NOT NULL,
      passhash BYTEA NOT NULL,
      firstname VARCHAR(64) NOT NULL,
      lastname VARCHAR(64) NOT NULL,
      birthday DATE NOT NULL,
      timezone VARCHAR(8) NOT NULL,
      address VARCHAR(64) NOT NULL,
      state CHAR(2) NOT NULL,
      zip VARCHAR(5) NOT NULL,
      ssn CHAR(11) NOT NULL
    );

    CREATE INDEX IF NOT EXISTS idx_users_accountid ON users (accountid);
    CREATE INDEX IF NOT EXISTS idx_users_username ON users (username);



    CREATE TABLE IF NOT EXISTS contacts (
      username VARCHAR(64) NOT NULL,
      label VARCHAR(128) NOT NULL,
      account_num CHAR(10) NOT NULL,
      routing_num CHAR(9) NOT NULL,
      is_external BOOLEAN NOT NULL,
      FOREIGN KEY (username) REFERENCES users(username)
    );

    CREATE INDEX IF NOT EXISTS idx_contacts_username ON contacts (username);
  1-load-testdata.sh: |
    #!/bin/bash
    # Copyright 2020 Google LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Immediately exit if any error occurs during script execution.
    set -o errexit

    # Skip adding data if not enabled
    if [ "$USE_DEMO_DATA" != "True"  ]; then
      echo "no demo users added"
      exit 0
    fi


    # Expected environment variables
    readonly ENV_VARS=(
      "POSTGRES_DB"
      "POSTGRES_USER"
      "LOCAL_ROUTING_NUM"
    )


    add_user() {
      # Usage:  add_user "ACCOUNTID" "USERNAME" "FIRST_NAME"
      echo "adding user: $2"
      psql -X -v ON_ERROR_STOP=1 -v account="$1" -v username="$2" -v firstname="$3" -v passhash="$DEFAULT_PASSHASH" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO users VALUES (:'account', :'username', :'passhash', :'firstname', 'User', '2000-01-01', '-5', 'Bowling Green, New York City', 'NY', '10004', '111-22-3333') ON CONFLICT DO NOTHING;
    EOSQL
    }


    add_external_account() {
      # Usage:  add_external_account "OWNER_USERNAME" "LABEL" "ACCOUNT" "ROUTING"
      echo "user $1 adding contact: $2"
      psql -X -v ON_ERROR_STOP=1 -v username="$1" -v label="$2" -v account="$3" -v routing="$4" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO contacts VALUES (:'username', :'label', :'account', :'routing', 'true') ON CONFLICT DO NOTHING;
    EOSQL
    }


    add_contact() {
      # Usage:  add_contact "OWNER_USERNAME" "CONTACT_LABEL" "CONTACT_ACCOUNT"
      echo "user $1 adding external account: $2"
      psql -X -v ON_ERROR_STOP=1 -v username="$1" -v label="$2" -v account="$3" -v routing="$LOCAL_ROUTING_NUM" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO contacts VALUES (:'username', :'label', :'account', :'routing', 'false') ON CONFLICT DO NOTHING;
    EOSQL
    }


    # Load test data into the database
    create_accounts() {
      # Add demo users.
      add_user "1011226111" "testuser" "Test"
      add_user "1033623433" "alice" "Alice"
      add_user "1055757655" "bob" "Bob"
      add_user "1077441377" "eve" "Eve"

      # Make everyone contacts of each other
      add_contact "testuser" "Alice" "1033623433"
      add_contact "testuser" "Bob" "1055757655"
      add_contact "testuser" "Eve" "1077441377"
      add_contact "alice" "Testuser" "1011226111"
      add_contact "alice" "Bob" "1055757655"
      add_contact "alice" "Eve" "1077441377"
      add_contact "bob" "Testuser" "1011226111"
      add_contact "bob" "Alice" "1033623433"
      add_contact "bob" "Eve" "1077441377"
      add_contact "eve" "Testuser" "1011226111"
      add_contact "eve" "Alice" "1033623433"
      add_contact "eve" "Bob" "1055757655"

      # Add external accounts
      add_external_account "testuser" "External Bank" "9099791699" "808889588"
      add_external_account "alice" "External Bank" "9099791699" "808889588"
      add_external_account "bob" "External Bank" "9099791699" "808889588"
      add_external_account "eve" "External Bank" "9099791699" "808889588"
    }


    main() {
      # Check environment variables are set
      for env_var in ${ENV_VARS[@]}; do
        if [[ -z "${!env_var}" ]]; then
          echo "Error: environment variable '$env_var' not set. Aborting."
          exit 1
        fi
      done

      # A password hash + salt for the demo password 'password'
      # Via Python3:  bycrypt.hashpw('password'.encode('utf-8'), bcrypt.gensalt())
      DEFAULT_PASSHASH='\x243262243132245273764737474f39777562452f4a786a79444a7263756f386568466b762e634e5262356e6867746b474752584c6634437969346643'

      create_accounts
    }


    main
  initialize-database.sh: |
    #!/bin/bash

    COUNTER=0
    SLEEP_TIME=60 # 1 minute
    DB_READY=0 # false
    INIT_SQL_SCRIPT="/scripts/0-accounts-schema.sql"
    TEST_SQL_SCRIPT="/scripts/1-load-testdata.sh"

    HOST=${1:-'127.0.0.1'}
    PORT=${2:-'5432'}
    DB_NAME=${3:-'default'}

    # Initial wait for sql-proxy to catch up
    sleep 20

    while [ $COUNTER -lt 10 ]; do
        let COUNTER=$COUNTER+1

        pg_isready --host=${HOST} --port=${PORT} --dbname=${DB_NAME}

        if [ $? -gt 0 ]; then
            echo "Attempt # ${COUNTER}: Database is not ready, trying again in 1 minute"
            sleep $SLEEP_TIME
        else
            echo "Database is ready to connect"
            let DB_READY=1
            break
        fi
    done

    if [ "${DB_READY}" -eq 1 ]; then
        echo "Running initialization script"
        psql --host=${HOST} --port=${PORT} --dbname=${DB_NAME} -f ${INIT_SQL_SCRIPT}
        if [ $? -gt 0 ]; then
            echo "Problems running the initialization script"
        else
            echo "Run Test Data"
            . ${TEST_SQL_SCRIPT}
        fi
    fi
  wait-to-complete-sidecar.sh: |
    #!/bin/bash
    COUNTER=0
    TARGET=$1
    PROCESS=$2

    echo "Looking for $TARGET"

    sleep 10s # Give 10s to allow processes to start

    # 20 minutes (60 x 10s increments)
    while [ $COUNTER -lt 120 ]; do
        let COUNTER=$COUNTER+1

        IS_RUNNING=$(ps -A | grep "scripts/$TARGET" | grep -v grep)

        if [ "$IS_RUNNING" != "" ]; then
          echo "Attempt # ${COUNTER}: Process not completed, trying again in 10 seconds -- ${IS_RUNNING}"
          sleep 10s
        else
          echo "'${TARGET}' Process Finished, Stopping '${PROCESS}'"
          killall ${PROCESS}
          exit 0
        fi
    done

    echo "Could not determine if the import finished, killing the proxy"
    killall ${PROCESS}
    exit 0
kind: ConfigMap
metadata:
  name: accounts-schema-config
---
apiVersion: v1
data:
  DEMO_LOGIN_PASSWORD: password
  DEMO_LOGIN_USERNAME: testuser
  USE_DEMO_DATA: "True"
kind: ConfigMap
metadata:
  name: demo-data-config
---
apiVersion: v1
data:
  LOCAL_ROUTING_NUM: "883745000"
  PUB_KEY_PATH: /root/.ssh/publickey
kind: ConfigMap
metadata:
  name: environment-config
---
apiVersion: v1
data:
  POSTGRES_DB: postgresdb
  POSTGRES_PASSWORD: admin
  POSTGRES_USER: admin
  SPRING_DATASOURCE_PASSWORD: admin
  SPRING_DATASOURCE_URL: jdbc:postgresql://127.0.0.1:5432/ledger-db
  SPRING_DATASOURCE_USERNAME: admin
kind: ConfigMap
metadata:
  labels:
    app: postgres
  name: ledger-db-config
---
apiVersion: v1
data:
  0-ledger-schema.sql: |
    /*
     * Copyright 2020, Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    CREATE TABLE TRANSACTIONS (
        TRANSACTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        FROM_ACCT CHAR(10) NOT NULL,
        TO_ACCT CHAR(10) NOT NULL,
        FROM_ROUTE CHAR(9) NOT NULL,
        TO_ROUTE CHAR(9) NOT NULL,
        AMOUNT INT NOT NULL,
        TIMESTAMP TIMESTAMP NOT NULL
    );
    -- index account number/routing number pairs
    CREATE INDEX ON TRANSACTIONS (FROM_ACCT, FROM_ROUTE, TIMESTAMP);
    CREATE INDEX ON TRANSACTIONS (TO_ACCT, TO_ROUTE, TIMESTAMP);
    -- append only ledger; prevent updates or deletes
    CREATE RULE PREVENT_UPDATE AS
      ON UPDATE TO TRANSACTIONS
      DO INSTEAD NOTHING;
    CREATE RULE PREVENT_DELETE AS
      ON DELETE TO TRANSACTIONS
      DO INSTEAD NOTHING;
  1-load-testdata.sh: |
    #!/bin/bash
    # Copyright 2020 Google LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.


    # Create demo transactions in the ledger for the demo user accounts.
    #
    # Gerenated transactions follow a pattern of biweekly large deposits with
    # periodic small payments to randomly choosen accounts.
    #
    # To run, set environment variable USE_DEMO_DATA="True"

    set -u


    # skip adding transactions if not enabled
    if [ -z "$USE_DEMO_DATA" ] && [ "$USE_DEMO_DATA" != "True"  ]; then
        echo "\$USE_DEMO_DATA not \"True\"; no demo transactions added"
        exit 0
    fi


    # Expected environment variables
    readonly ENV_VARS=(
      "POSTGRES_DB"
      "POSTGRES_USER"
      "LOCAL_ROUTING_NUM"
    )


    add_transaction() {
        DATE=$(date -u +"%Y-%m-%d %H:%M:%S.%3N%z" --date="@$(($6))")
        echo "adding demo transaction: $1 -> $2"
        psql -X -v ON_ERROR_STOP=1 -v fromacct="$1" -v toacct="$2" -v fromroute="$3" -v toroute="$4" -v amount="$5" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            INSERT INTO TRANSACTIONS (FROM_ACCT, TO_ACCT, FROM_ROUTE, TO_ROUTE, AMOUNT, TIMESTAMP)
            VALUES (:'fromacct', :'toacct', :'fromroute', :'toroute', :'amount', '$DATE');
    EOSQL
    }


    create_transactions() {
        PAY_PERIODS=3
        DAYS_BETWEEN_PAY=14
        SECONDS_IN_PAY_PERIOD=$(( 86400 * $DAYS_BETWEEN_PAY  ))
        DEPOSIT_AMOUNT=250000

        # create a UNIX timestamp in seconds since the Epoch
        START_TIMESTAMP=$(( $(date +%s) - $(( $(($PAY_PERIODS+1)) * $SECONDS_IN_PAY_PERIOD  ))  ))

        for i in $(seq 1 $PAY_PERIODS); do
            # create deposit transaction for each user
            for account in ${USER_ACCOUNTS[@]}; do
                add_transaction "$EXTERNAL_ACCOUNT" "$account" "$EXTERNAL_ROUTING" "$LOCAL_ROUTING_NUM" $DEPOSIT_AMOUNT $START_TIMESTAMP
            done

            # create 15-20 payments between users
            TRANSACTIONS_PER_PERIOD=$(shuf -i 15-20 -n1)
            for p in $(seq 1 $TRANSACTIONS_PER_PERIOD); do
                # randomly generate an amount between $10-$100
                AMOUNT=$(shuf -i 1000-10000 -n1)

                # randomly select a sender and receiver
                SENDER_ACCOUNT=${USER_ACCOUNTS[$RANDOM % ${#USER_ACCOUNTS[@]}]}
                RECIPIENT_ACCOUNT=${USER_ACCOUNTS[$RANDOM % ${#USER_ACCOUNTS[@]}]}
                # if sender equals receiver, send to a random anonymous account
                if [[ "$SENDER_ACCOUNT" == "$RECIPIENT_ACCOUNT" ]]; then
                    RECIPIENT_ACCOUNT=$(shuf -i 1000000000-9999999999 -n1)
                fi

                TIMESTAMP=$(( $START_TIMESTAMP + $(( $SECONDS_IN_PAY_PERIOD * $p / $(($TRANSACTIONS_PER_PERIOD + 1 )) )) ))

                add_transaction "$SENDER_ACCOUNT" "$RECIPIENT_ACCOUNT" "$LOCAL_ROUTING_NUM" "$LOCAL_ROUTING_NUM" $AMOUNT $TIMESTAMP
            done

            START_TIMESTAMP=$(( $START_TIMESTAMP + $(( $i * $SECONDS_IN_PAY_PERIOD  )) ))
        done
    }


    create_ledger() {
      # Account numbers for users 'testuser', 'alice', 'bob', and 'eve'.
      USER_ACCOUNTS=("1011226111" "1033623433" "1055757655" "1077441377")
      # Numbers for external account 'External Bank'
      EXTERNAL_ACCOUNT="9099791699"
      EXTERNAL_ROUTING="808889588"

      create_transactions
    }


    main() {
      # Check environment variables are set
      for env_var in ${ENV_VARS[@]}; do
        if [[ -z "${env_var}" ]]; then
          echo "Error: environment variable '$env_var' not set. Aborting."
          exit 1
        fi
      done

      create_ledger
    }


    main
  initialize-database.sh: |
    #!/bin/bash

    COUNTER=0
    SLEEP_TIME=60 # 1 minute
    DB_READY=0 # false
    INIT_SQL_SCRIPT="/scripts/0-ledger-schema.sql"
    TEST_SQL_SCRIPT="/scripts/1-load-testdata.sh"

    HOST=${1:-'127.0.0.1'}
    PORT=${2:-'5432'}
    DB_NAME=${3:-'default'}

    # Initial wait for sql-proxy to catch up
    sleep 20

    while [ $COUNTER -lt 10 ]; do
        let COUNTER=$COUNTER+1

        pg_isready --host=${HOST} --port=${PORT} --dbname=${DB_NAME}

        if [ $? -gt 0 ]; then
            echo "Attempt # ${COUNTER}: Database is not ready, trying again in 1 minute"
            sleep $SLEEP_TIME
        else
            echo "Database is ready to connect"
            let DB_READY=1
            break
        fi
    done

    if [ "${DB_READY}" -eq 1 ]; then
        echo "Running initialization script"
        psql --host=${HOST} --port=${PORT} --dbname=${DB_NAME} -f ${INIT_SQL_SCRIPT}
        if [ $? -gt 0 ]; then
            echo "Problems running the initialization script"
        else
            echo "Run Test Data"
            . ${TEST_SQL_SCRIPT}
        fi
    fi
  wait-to-complete-sidecar.sh: |
    #!/bin/bash
    COUNTER=0
    TARGET=$1
    PROCESS=$2

    echo "Looking for $TARGET"

    sleep 10s # Give 10s to allow processes to start

    # 20 minutes (60 x 10s increments)
    while [ $COUNTER -lt 120 ]; do
        let COUNTER=$COUNTER+1

        IS_RUNNING=$(ps -A | grep "scripts/$TARGET" | grep -v grep)

        if [ "$IS_RUNNING" != "" ]; then
          echo "Attempt # ${COUNTER}: Process not completed, trying again in 10 seconds -- ${IS_RUNNING}"
          sleep 10s
        else
          echo "'${TARGET}' Process Finished, Stopping '${PROCESS}'"
          killall ${PROCESS}
          exit 0
        fi
    done

    echo "Could not determine if the import finished, killing the proxy"
    killall ${PROCESS}
    exit 0
kind: ConfigMap
metadata:
  name: ledger-schema-config
---
apiVersion: v1
data:
  BALANCES_API_ADDR: balancereader:8080
  CONTACTS_API_ADDR: contacts:8080
  HISTORY_API_ADDR: transactionhistory:8080
  TRANSACTIONS_API_ADDR: ledgerwriter:8080
  USERSERVICE_API_ADDR: userservice:8080
kind: ConfigMap
metadata:
  name: service-api-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: accounts-db
    tier: db
  name: accounts-db
spec:
  ports:
  - name: tcp
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: accounts-db
    tier: db
---
apiVersion: v1
kind: Service
metadata:
  name: balancereader
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: balancereader
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: contacts
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: contacts
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: frontend
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: ledger-db
spec:
  ports:
  - name: tcp
    port: 5432
    targetPort: 5432
  selector:
    app: ledger-db
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: ledgerwriter
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: ledgerwriter
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: transactionhistory
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: transactionhistory
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: userservice
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: userservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: balancereader
spec:
  selector:
    matchLabels:
      app: balancereader
  template:
    metadata:
      labels:
        app: balancereader
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: POLL_MS
          value: "100"
        - name: CACHE_SIZE
          value: "1000000"
        - name: JVM_OPTS
          value: -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
        - name: LOG_LEVEL
          value: info
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: ledger-db-config
        image: gcr.io/bank-of-anthos/balancereader:v0.4.3
        livenessProbe:
          httpGet:
            path: /healthy
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 5
          timeoutSeconds: 10
        name: balancereader
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: publickey
          readOnly: true
      serviceAccountName: boa-ksa
      terminationGracePeriodSeconds: 5
      volumes:
      - name: publickey
        secret:
          items:
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: contacts
spec:
  selector:
    matchLabels:
      app: contacts
  template:
    metadata:
      labels:
        app: contacts
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: LOG_LEVEL
          value: info
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: accounts-db-config
        image: gcr.io/bank-of-anthos/contacts:v0.4.3
        name: contacts
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: publickey
          readOnly: true
      serviceAccountName: boa-ksa
      terminationGracePeriodSeconds: 5
      volumes:
      - name: publickey
        secret:
          items:
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: SCHEME
          value: http
        - name: LOG_LEVEL
          value: info
        - name: DEFAULT_USERNAME
          valueFrom:
            configMapKeyRef:
              key: DEMO_LOGIN_USERNAME
              name: demo-data-config
        - name: DEFAULT_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: DEMO_LOGIN_PASSWORD
              name: demo-data-config
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: service-api-config
        image: gcr.io/bank-of-anthos/frontend:v0.4.3
        livenessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 30
        name: front
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: publickey
          readOnly: true
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      volumes:
      - name: publickey
        secret:
          items:
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ledgerwriter
spec:
  selector:
    matchLabels:
      app: ledgerwriter
  template:
    metadata:
      labels:
        app: ledgerwriter
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: JVM_OPTS
          value: -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
        - name: LOG_LEVEL
          value: info
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: service-api-config
        - configMapRef:
            name: ledger-db-config
        image: gcr.io/bank-of-anthos/ledgerwriter:v0.4.3
        name: ledgerwriter
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: publickey
          readOnly: true
      serviceAccountName: boa-ksa
      terminationGracePeriodSeconds: 5
      volumes:
      - name: publickey
        secret:
          items:
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loadgenerator
  template:
    metadata:
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: loadgenerator
    spec:
      containers:
      - env:
        - name: FRONTEND_ADDR
          value: frontend:80
        - name: USERS
          value: "5"
        - name: LOG_LEVEL
          value: error
        image: gcr.io/bank-of-anthos/loadgenerator:v0.4.3
        name: loadgenerator
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transactionhistory
spec:
  selector:
    matchLabels:
      app: transactionhistory
  template:
    metadata:
      labels:
        app: transactionhistory
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: POLL_MS
          value: "100"
        - name: CACHE_SIZE
          value: "1000"
        - name: CACHE_MINUTES
          value: "60"
        - name: HISTORY_LIMIT
          value: "100"
        - name: JVM_OPTS
          value: -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
        - name: LOG_LEVEL
          value: info
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: ledger-db-config
        image: gcr.io/bank-of-anthos/transactionhistory:v0.4.3
        livenessProbe:
          httpGet:
            path: /healthy
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 5
          timeoutSeconds: 10
        name: transactionhistory
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: publickey
          readOnly: true
      serviceAccountName: boa-ksa
      terminationGracePeriodSeconds: 5
      volumes:
      - name: publickey
        secret:
          items:
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userservice
spec:
  selector:
    matchLabels:
      app: userservice
  template:
    metadata:
      labels:
        app: userservice
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      - env:
        - name: VERSION
          value: v0.4.3
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "true"
        - name: TOKEN_EXPIRY_SECONDS
          value: "3600"
        - name: PRIV_KEY_PATH
          value: /root/.ssh/privatekey
        - name: LOG_LEVEL
          value: info
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: accounts-db-config
        image: gcr.io/bank-of-anthos/userservice:v0.4.3
        name: userservice
        ports:
        - containerPort: 8080
          name: http-server
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /root/.ssh
          name: keys
          readOnly: true
      serviceAccountName: boa-ksa
      terminationGracePeriodSeconds: 5
      volumes:
      - name: keys
        secret:
          items:
          - key: jwtRS256.key
            path: privatekey
          - key: jwtRS256.key.pub
            path: publickey
          secretName: jwt-key
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: accounts-db
    tier: db
  name: accounts-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: accounts-db
      tier: db
  serviceName: accounts-db
  template:
    metadata:
      labels:
        app: accounts-db
        tier: db
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: accounts-db-config
        - configMapRef:
            name: demo-data-config
        image: gcr.io/bank-of-anthos/accounts-db:v0.4.3
        name: accounts-db
        ports:
        - containerPort: 5432
          name: postgredb
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresdb
          subPath: postgres
      serviceAccountName: default
      volumes:
      - emptyDir: {}
        name: postgresdb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ledger-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ledger-db
  serviceName: ledger-db
  template:
    metadata:
      labels:
        app: ledger-db
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: ledger-db-config
        - configMapRef:
            name: demo-data-config
        image: gcr.io/bank-of-anthos/ledger-db:v0.4.3
        name: postgres
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresdb
          subPath: postgres
      serviceAccountName: default
      volumes:
      - emptyDir: {}
        name: postgresdb
---
apiVersion: batch/v1
kind: Job
metadata:
  name: populate-accounts-db
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
      - command:
        - bash
        - -c
        - . /scripts/wait-to-complete-sidecar.sh "initialize-database.sh" "cloud_sql_proxy"
        image: bash
        name: sidecar-controller
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        volumeMounts:
        - mountPath: /scripts
          name: scripts
          readOnly: true
      - command:
        - bash
        - -c
        - . /scripts/initialize-database.sh 127.0.0.1 5432 accounts-db
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: cloud-sql-admin
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: cloud-sql-admin
        - name: LOCAL_ROUTING_NUM
          valueFrom:
            configMapKeyRef:
              key: LOCAL_ROUTING_NUM
              name: environment-config
        - name: USE_DEMO_DATA
          valueFrom:
            configMapKeyRef:
              key: USE_DEMO_DATA
              name: demo-data-config
        - name: POSTGRES_DB
          value: accounts-db
        - name: PGHOSTADDR
          value: 127.0.0.1
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: cloud-sql-admin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: cloud-sql-admin
        image: postgres:13.0
        name: populate-accounts-db
        volumeMounts:
        - mountPath: /scripts
          name: scripts
          readOnly: true
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        securityContext:
          runAsNonRoot: true
      restartPolicy: Never
      serviceAccountName: boa-ksa
      shareProcessNamespace: true
      volumes:
      - configMap:
          name: accounts-schema-config
        name: scripts
---
apiVersion: batch/v1
kind: Job
metadata:
  name: populate-ledger-db
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
      - command:
        - bash
        - -c
        - . /scripts/wait-to-complete-sidecar.sh "initialize-database.sh" "cloud_sql_proxy"
        image: bash
        name: sidecar-controller
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
        volumeMounts:
        - mountPath: /scripts
          name: scripts
          readOnly: true
      - command:
        - bash
        - -c
        - . /scripts/initialize-database.sh 127.0.0.1 5432 ledger-db
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: cloud-sql-admin
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: cloud-sql-admin
        - name: LOCAL_ROUTING_NUM
          valueFrom:
            configMapKeyRef:
              key: LOCAL_ROUTING_NUM
              name: environment-config
        - name: USE_DEMO_DATA
          valueFrom:
            configMapKeyRef:
              key: USE_DEMO_DATA
              name: demo-data-config
        - name: POSTGRES_DB
          value: ledger-db
        - name: PGHOSTADDR
          value: 127.0.0.1
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: cloud-sql-admin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: cloud-sql-admin
        image: postgres:13.0
        name: populate-ledger-db
        volumeMounts:
        - mountPath: /scripts
          name: scripts
          readOnly: true
      - command:
        - /cloud_sql_proxy
        - -instances=$(CONNECTION_NAME)=tcp:5432
        env:
        - name: CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              key: connectionName
              name: cloud-sql-admin
        image: gcr.io/cloudsql-docker/gce-proxy:1.19.0-alpine
        name: cloudsql-proxy
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
      restartPolicy: Never
      serviceAccountName: boa-ksa
      shareProcessNamespace: true
      volumes:
      - configMap:
          name: ledger-schema-config
        name: scripts
